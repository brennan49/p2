#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <fcntl.h>
#include <string.h>

char error_message[30] = "An error has occurred\n";

char ** tokenize (char * line) {
    char ** theCmd = malloc(128 * sizeof(char*));
    char * token = strtok (line, " \n");
    int i = 0;
    while (token != NULL) {
        theCmd[i] = malloc (strlen(token) + 1);
        strcpy (theCmd[i], token);
        i++;
        token = strtok(NULL, " \n");
    }
    theCmd[i] = NULL;
    return (theCmd);
}

int main (int argc, char * argv[]) {
    char * line = malloc(128);
    pid_t wpid;
    int pid;
    char * args = malloc(128);
    int i = 0;
    char * path [128];
    char ** theCmd;
    char * cwd = malloc(512);
    if (argc > 1) {
        write (STDERR_FILENO, error_message, strlen(error_message));
    }

    while (1) {
        printf ("whoosh> ");
        if (fgets(line, 128, stdin) == NULL) {
            write (STDERR_FILENO, error_message, strlen(error_message));
        }
        for(i = 0; i < 128; i++) {
            if(strstr(line, "\n") == NULL) {
                printf("line length");
                write (STDERR_FILENO, error_message, strlen(error_message));
            }
        }
        theCmd = tokenize(line);
        for(i = 0; i < 3; i++) {
            printf("theCmd = %s\n", theCmd[i]);
        }
        if (strcmp (theCmd[0], "ls") == 0) {
            pid = fork();
            if (pid == 0) {
                if (execv("/bin/ls", theCmd) == -1) {
                    write (STDERR_FILENO, error_message, strlen(error_message)); 
                }
            }
            else if (pid < 0) {
                write (STDERR_FILENO, error_message, strlen(error_message));
            }
            else {
                wpid =  wait(&pid);
                if (wpid < 0) {
                    write (STDERR_FILENO, error_message, strlen(error_message));
                }
            }

        }

        if (strcmp (theCmd[0], "cd") == 0) {
            if (theCmd[1] == NULL) {
                chdir(getenv("HOME"));
            }

            else {
                printf("%s\n", theCmd[1]);
                if((chdir(theCmd[1])) == -1){
                    write (STDERR_FILENO, error_message, strlen(error_message));
                }
            }
        }

        if (strcmp (theCmd[0], "pwd") == 0) {
            getcwd (cwd, 128);
            if (cwd == NULL) {
                write (STDERR_FILENO, error_message, strlen(error_message));
            }
            else {
                printf("%s\n", cwd);
            }
        }

        if (strcmp (theCmd[0], "path") == 0) {
            i = 1;
            while (theCmd[i] != NULL) {
                path[i - 1] = malloc(strlen(theCmd[i]) + 1);
                strcpy(path[i - 1], theCmd[i]);
                i++;
            }
        }

        if (strcmp (theCmd[0], "exit") == 0) {
            break;
        }
    }
    exit(0);
}

